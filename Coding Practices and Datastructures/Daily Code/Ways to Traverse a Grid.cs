using System;
using System.Collections.Generic;
using System.Linq;
using System.Numerics;
using System.Text;
using System.Threading.Tasks;

namespace Coding_Practices_and_Datastructures.Daily_Code
{

    /*
     * Hi, here's your problem today. This problem was recently asked by Microsoft:

        You 2 integers n and m representing an n by m grid, determine the number of ways you can get from the top-left to the bottom-right of the matrix y going only right or down.

        Example:
        n = 2, m = 2

        This should return 2, since the only possible routes are:
        Right, down
        Down, right.
    */
    class Ways_to_Traverse_a_Grid : Testable
    {
        private class InOut : InOutBase<int[], BigInteger>
        {
            public InOut(int n, int m, long outp) : this(n, m, new BigInteger(outp)) { }
            public InOut(int n, int m, BigInteger outp) : base(new int[] { n, m }, outp, true)
            {
                inputStringConverter = arg => Helfer.Arrayausgabe<int>("Eingabe: ", arg);
                AddSolver((arg, erg) => erg.Setze(Num_ways(arg[0], arg[1])), "Calculate Permuations");
            }
        }

        public Ways_to_Traverse_a_Grid()
        {
            testcases.Add(new InOut(2, 2, 2));
            testcases.Add(new InOut(3, 3, 6));      // Outputs Calculated with online Binomial Coefficient Calculator
            testcases.Add(new InOut(4, 4, 20));
            testcases.Add(new InOut(5, 6, 126));
            testcases.Add(new InOut(2, 6, 6));
            testcases.Add(new InOut(4, 8, 120));

            testcases.Add(new InOut(10, 20, 6906900));
            testcases.Add(new InOut(50, 20, 33516481089577200));
            testcases.Add(new InOut(100, 30, (new BigInteger(4673234978005159)*new BigInteger(Math.Pow(10, 13)) + new BigInteger(1701222672000)) ));
            testcases.Add(new InOut(1000, 300, BigInteger.Parse("455766562494371262698994473159217771441878962971013575716190811108895125355496558462564113880143994819727854319746497711026752925936947066954198556527275415079159021757110227151277736878783913094456755849176287693683019976735704017130416132881821931072540132783258874233362174294615811471853240953280000")));
            testcases.Add(new InOut(10000, 3000, BigInteger.Parse("117055548478214372158452600918211223479560648575051559159604637405115347036081643528439908894630438573810560306658037708985502708325502579220874734489942695527916656147811734514190026842515468943635092481869755827315956331422206065324864410764195869464545134001114741509706877321604183038375072793867629010235688895101801709695668521962415122923019940665993958226957849097455200086846655254505805469930630583572747102886046520091237911859548799522810847464940329467323528008835502641783169091627480550221367867511871479640907712315055782141915930598201898332696545694112681684002469647609980575240491694007257252889988407021485371931929195969443454098471909101063907264649657717269655313405475683028260044503589149776124565135491382152653108944213040015474637928540254115350471924340427039253730188547341386307807316478273846641079405270365847723174891335842375244910254461475704252061111214957695400924760394811085867454604751023175722473721987989691736297711180295622749214974417187742244045698739202019379464122039694286087772371221677106758875462095700006120543359333785408833883569727106152027622138539880540756422748835448041733986832116275090223210542138350250799629478733975639354496436560459449215955678789580025174625053022554393202962204897164406355563928723877066532964554933705923597658620316123617760428186161172786198370243367200857887439993943681104978733888387827980093917202470044823299165595152144105688977593052661202666259698536582056826630181239581648052538728283034266728323695713717607349794858069756155137672774071412151436958801043115752177522292598784265983061589375434957263114287759994965323039574171228288697224842676562039043357303971694741281542576681918675127982643282309574272265696935058988310964567458601801366921176878094137423739490194145012346722271445860353009049362260640199223296436047408086575991223927248193598103175896962423975355139862638741512651173479646046792877638906969709015480014262989152742337121141435699885599682581982300396382859217295300157518297277053112183484373274306713576392982199655990349063182869293152066237730532821633210792151230187919929259353726057577877154261652291838979344900661430426572707205412010767890261561044331296188633538860746871921088074511714309685328589771395326288377214862138074728472907245607777629927702575724518967180661808324753407453990696634886640370121811806998784534278997011373017582425007282353976434189296311302165906934764028508774432461699234115897694142153946081115178203051226607884393527772497490398077499520167264755858383747876628775461103522480349034655553217960804119025915364764489622146041013447087065794929696413666823525711780567822804996011217866889916749552435433076546941489950185039332351411662118964121146405886964352162261334043861565292696951014531671751567720226410468608577476571934319660237586425528191351480217028381229154087023796683659755111547639567158392416215681108022622875776162916793333035443893287747449583891271993219726938714073182276930672931834979991879791960820463644194965768053503270618840712450240278876800000")));
        }

        /* Solution Idea:
         *
         * To go from left to right using only (Go Right, Go Left) you have to go:
         *  -   width -1    times to the right: ->
         *  -   height -1   times downwards:     V
         * 
         *  
         *      -> ->
         *       x  x  x V
         *       x  x  x V
         *       x  x  x
         * 
         *  In a 3x3 Grid:
         *  Two times down and tow times right
         *  
         *  The final Solution to the Problem equals the number of Permutations of the 4 Moves, e.g 4! = 24.
         *  However 4! calculates all the Permutations of all Elements. It considers all elements as distinct.
         *      ->1 ->2 V1 V2
         *      ->2 ->1 V1 V2   
         *  
         *  To exclude all similar permutations, we calculate:  4! / (2! * 2!)    
         *  4! divided by ( all permutations of -> * all permutations of V)
         *  
         *  To generalize all of that in one formula:
         *  int numOfWaysToTraverseGrid = ((n-1)+(m-1))! / ( (n-1)! (m-1)! )    or (n+m-2)! / ( n-1)!*(m-1)! )
         * 
         * 
         *  Trivia:
         *  int n = (width-1)*(height-1)
         *  int k = n-widht-1
         *  
         *  Calculate Binomial Coefficient: (n choose k)    => n! / (k! * (n-k!))
         * 
         * 
         *  Trivia:
         *  Permutations with identical Elements
         *  n! / (a!*b!+c!...)
         *  n = all Elements
         *  a = number of a Elements
         *  b = number of b Elements
         * 
         */

        private static BigInteger Num_ways(int n, int m)
        {
            BigInteger total = fact(n+m-2);
            return (BigInteger) (  total / (fact(n - 1) * fact(m - 1)) );
        }


        private static BigInteger fact(BigInteger num)
        {
            for (int i = (int)num-1; i > 1; i--)
                num *= i;
            return num;
        }
    }
}
